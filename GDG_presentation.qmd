---
title: "Catching ðŸ”¥: Scaling Shiny Apps with Google's Firebase"
author: "Umair Durrani"
execute: 
  eval: false
  echo: true
highlight-style: vim-dark
format: 
  revealjs:
    #incremental: true
    #footer: "`emitanaka.org/slides/toronto2022`"
    slide-number: true
    multiplex: true
    theme: [simple, assets/monash.scss]
    show-slide-number: all
    controls: true
    width: 1280
    height: 720
    css: [assets/syntax-highlight.css, assets/custom.css, assets/pacman.css]
---

## What is shiny?

::: info-box

An R package that lets you create web applications with no knowledge* of HTML / CSS / Javascript  

:::

. . . 

  \  
  

**Web applications?** Software that you access and use in a web browser  
  
  \  
  \  
    
. . . 

\* mostly


## What about python?

![](shiny_r_python.png)

# Let's take a look at an example app

##

```{=html}
<iframe width="800" height="800" src="https://umair.shinyapps.io/GoogleDevelopersGroupShiny/_w_f3eb35a9/?" title="Shiny app"></iframe>
```



# Getting Started {background-color="#b22626"}


## Structure of a shiny app

```{r}
library(shiny)

ui <- fluidPage(
  
)

server <- function(input, output, session) {
  
}

shinyApp(ui, server)
```




## Create Project

![](firebase_create_project.PNG)

## Give your project a name


![](firebase_create_project_step1.PNG)

## Enable Google Analytics (Optional)

![](firebase_create_project_step2.PNG)


## {background-image="firebase_project_created.PNG"}


# Create an app

## Select web app

![](firebase_create_app.PNG)

## Give your app a name

![](firebase_create_app_1.PNG)

## {background-image="firebase_create_app_2.PNG" background-size="800px"}

<!--![](firebase_create_app_2.PNG)-->

## Now you can add authentication to your app

![](firebase_app_created.PNG)


# Authentication

## {background-image="firebase_authentication1.PNG" background-size="1200px"}


## Choose sign-in methods

![](firebase_authentication2.PNG)


## Gmail {background-image="firebase_authentication3.PNG"}

<!-- ![](firebase_authentication3.PNG) -->


## You may also enable sign-in via email

![](firebase_authentication4.PNG)


## Add users manually 

![](firebase_authentication5.PNG)





# Build the app using {shiny}

## Authentication

```{r}
#| code-line-numbers: "5-10"
polished::polished_config(
    app_name = "APP_NAME",
    api_key = "POLISHED_API_KEY",

    firebase_config = list(
      apiKey = "FIREBASE_API_KEY",
      authDomain = "AUTH_DOMAIN",
      projectId = "PROJECT_ID"
    ),
    sign_in_providers = c("google", "email")
  )
```


## Programmatically add users and sign in

Define a function:  
```{r}
#| code-line-numbers: "1|2-3|4|5-10|13"
sign.in <- function(email, password, api_key) {
  r <- httr::POST(paste0("https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=", api_key),
    httr::add_headers("Content-Type" = "application/json"),
    body = jsonlite::toJSON(
      list(
        email = email,
        password = password,
        returnSecureToken = TRUE
      ),
      auto_unbox = TRUE
    )
  )
  return(httr::content(r))
}
```

. . .   

Use the function:
```{r}
user <- sign.in("user_email",  "user_password", api_key)
```









